{"remainingRequest":"/Users/tom/Documents/GitHub/prismicgallery/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tom/Documents/GitHub/prismicgallery/src/views/Tutorial.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tom/Documents/GitHub/prismicgallery/src/views/Tutorial.vue","mtime":1565119069770},{"path":"/Users/tom/Documents/GitHub/prismicgallery/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tom/Documents/GitHub/prismicgallery/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tom/Documents/GitHub/prismicgallery/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tom/Documents/GitHub/prismicgallery/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from 'vue'\nimport VueHighlightJS from 'vue-highlightjs'\n\nVue.use(VueHighlightJS)\n\nexport default {\n  name: 'Tutorial'\n}\n",{"version":3,"sources":["Tutorial.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4RA;AACA;;AAEA;;AAEA;AACA;AACA","file":"Tutorial.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"prismic-tutorial\">\n\n    <header>\n      <nav>\n        <a href=\"#bootstrap\"><strong>Configure a repository</strong></a>\n        <a href=\"https://prismic.io/docs/vuejs\" target=\"_blank\" rel=\"noopener\" class=\"doc\">Documentation<img src=\"../assets/img/tutorial/open.svg\" alt=\"Open\"></a>\n      </nav>\n      <div class=\"wrapper\">\n        <img src=\"../assets/img/tutorial/rocket.svg\" alt=\"Rocket\">\n        <h1>High five, you deserve it!</h1>\n        <p>Grab a well deserved cup of coffee, you’re just a few steps away from creating a Vue.js component with content managed in Prismic.</p>\n      </div>\n      <div class=\"hero-curve\"></div>\n      <div class=\"flip-flap\">\n        <div class=\"flipper\">\n          <div class=\"guide\">\n            <ul>\n              <li><a href=\"#bootstrap\"><span>1</span>Bootstrap your project<img src=\"../assets/img/tutorial/chevron.svg\" alt=\"Chevron down\"></a></li>\n              <li><a href=\"#custom-type\"><span>2</span>Create a Custom Type \"Page\"<img src=\"../assets/img/tutorial/chevron.svg\" alt=\"Chevron down\"></a></li>\n              <li><a href=\"#new-document\"><span>3</span>Publish your first \"Page\" document<img src=\"../assets/img/tutorial/chevron.svg\" alt=\"Chevron down\"></a></li>\n              <li><a href=\"#code\"><span>4</span>Query the API in your Vue component<img src=\"../assets/img/tutorial/chevron.svg\" alt=\"Chevron down\"></a></li>\n              <li><a href=\"#done\"><span>5</span>Well done!<img src=\"../assets/img/tutorial/chevron.svg\" alt=\"Chevron down\"></a></li>\n            </ul>\n          </div>\n          <div class=\"gif\"></div>\n        </div>\n      </div>\n    </header>\n\n    <section>\n\n      <p>This is a tutorial page included in this Vue.js starter project, it has a few useful links and example code snippets to help you get started.</p>\n      <p>You can access this very tutorial page at <a href=\"http://localhost:8080/tutorial\">http://localhost:8080/tutorial</a>.</p>\n\n      <h2>Follow these 5 simple steps</h2>\n\n      <h3 id=\"bootstrap\"><span>1</span>Bootstrap your project</h3>\n      <h4>Create a Prismic content repository</h4>\n      <p>A repository is where your website’s content will live. Simply <a href=\"https://prismic.io/#create\" target=\"_blank\" rel=\"noopener\">create one</a> choosing a repository name and a plan. We’ve got a variety of plans including our favorite: Free!</p>\n      <h4>Configure your project</h4>\n      <p>Open the index.html file and define the API endpoint of your Prismic repository:</p>\n<pre v-highlightjs class=\"source-code\"><code class=\"xml\">&lt;!-- In public/index.html --&gt;\n\n&lt;script&gt;\n  window.prismic = {\n    endpoint: 'https://your-repo-name.prismic.io/api/v2'\n  }\n&lt;/script&gt;\n</code></pre>\n      <p>Next let’s see how to create a Vue component filled with content retrieved from Prismic.</p>\n\n      <h3 id=\"custom-type\"><span>2</span>Create a Custom Type \"Page\"</h3>\n      <p>We’ll create a document containing a title, a description, a call to action and an icon. Let’s create a Custom Type in Prismic with the corresponding fields. We’ll add an additional UID field (unique identifier) for querying the document.</p>\n      <p>Go to the Web interface of the Prismic repository you’ve just created (at https://your-repo-name.prismic.io). Then navigate to the <em>\"Custom Types\"</em> section (icon on the left navbar) and create a new Repeatable Type, for this tutorial let’s name it \"Page\", so that its API ID will be set to <strong>\"page\"</strong>.</p>\n      <p>Once the \"Page\" Custom Type is created, we have to define how we want to model it, that is to say a document containing a UID field, a rich text field for the title, a rich text field for the description, a link field + a rich text field for the call to action and an image field for the icon. Click on <em>\"JSON editor\"</em> (right sidebar) and paste in the following JSON data.</p>\n      <p>When you’re done, hit <em>\"Save\"</em>.</p>\n<pre v-highlightjs class=\"source-code\"><code class=\"json\">{\n  \"Main\": {\n    \"uid\": {\n      \"type\": \"UID\",\n      \"config\": {\n        \"placeholder\": \"UID...\",\n        \"label\": \"UID\"\n      }\n    },\n    \"title\": {\n      \"type\": \"StructuredText\",\n      \"config\": {\n        \"single\": \"heading1\",\n        \"label\": \"Title\",\n        \"placeholder\": \"Title...\"\n      }\n    },\n    \"description\": {\n      \"type\": \"StructuredText\",\n      \"config\": {\n        \"multi\": \"paragraph, heading2, strong, em, hyperlink\",\n        \"allowTargetBlank\": true,\n        \"label\": \"Description\",\n        \"placeholder\": \"Description...\"\n      }\n    },\n    \"cta_link\": {\n      \"type\": \"Link\",\n      \"config\": {\n        \"allowTargetBlank\": true,\n        \"label\": \"CTA link\",\n        \"placeholder\": \"CTA link...\"\n      }\n    },\n    \"cta_text\": {\n      \"type\": \"StructuredText\",\n      \"config\": {\n        \"single\": \"paragraph\",\n        \"label\": \"CTA text\",\n        \"placeholder\": \"CTA text...\"\n      }\n    },\n    \"icon\": {\n      \"type\": \"Image\"\n    }\n  }\n}\n</code></pre>\n\n      <h3 id=\"new-document\"><span>3</span>Publish your first \"Page\" document</h3>\n      <p>Now it is time to fill in and publish your first \"Page\" document in your Prismic repository.</p>\n      <p>\n        Create a new \"Page\" document in your repository: go to <em>\"Content\"</em> and hit <em>\"New\"</em>.\n        Fill the corresponding fields. Note the value you filled in the UID field, because it will be a part of the component route path, for this tutorial let’s put <strong>\"quickstart\"</strong>.\n      </p>\n      <p>When you’re done, hit <em>\"Save\"</em> then <em>\"Publish\"</em>.</p>\n\n      <h3 id=\"code\"><span>4</span>Query the API in your Vue component</h3>\n\n      <h4>Create a component that retrieves your content</h4>\n      <p>Let’s create a Vue component that will display content fetched from the Prismic API.</p>\n      <p>Go back to your local code and create a new Vue component file named \"Page.vue\" inside the views folder (src/views/Page.vue).  We’ll make an API call to retrieve the document content, querying it by specifying its UID.</p>\n      <p>Here’s an example that’ll render a \"Page\" document with its title, description, call to action and icon:</p>\n<pre v-highlightjs class=\"source-code\"><code class=\"xml\">&lt;!-- Create file src/views/Page.vue --&gt;\n\n&lt;template&gt;\n  &lt;div class=\"wrapper\"&gt;\n    &lt;prismic-edit-button :documentId=\"documentId\"/&gt;\n    &lt;h1 class=\"title\"&gt;\n      {{ \"\\{\\{ $prismic.richTextAsPlain(fields.title) \\}\\}\" }}\n    &lt;/h1&gt;\n    &lt;prismic-rich-text :field=\"fields.description\" class=\"description\"/&gt;\n    &lt;div class=\"cta-wrapper\"&gt;\n      &lt;prismic-link :field=\"fields.ctaLink\" class=\"cta\"&gt;\n        {{ \"\\{\\{ $prismic.richTextAsPlain(fields.ctaText) \\}\\}\" }}\n      &lt;/prismic-link&gt;\n    &lt;/div&gt;\n    &lt;div class=\"icon-wrapper\"&gt;\n      &lt;prismic-image :field=\"fields.icon\" class=\"icon\"/&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Page',\n  data () {\n    return {\n      documentId: '',\n      fields: {\n        title: null,\n        description: null,\n        ctaLink: null,\n        ctaText: null,\n        icon: null\n      }\n    }\n  },\n  methods: {\n    getContent (uid) {\n      this.$prismic.client.getByUID('page', uid)\n        .then((document) =&gt; {\n          if (document) {\n            this.documentId = document.id\n            this.fields.title = document.data.title\n            this.fields.description = document.data.description\n            this.fields.ctaLink = document.data.cta_link\n            this.fields.ctaText = document.data.cta_text\n            this.fields.icon = document.data.icon\n          } else {\n            this.$router.push({ name: 'not-found' })\n          }\n        })\n    }\n  },\n  created () {\n    this.getContent(this.$route.params.uid)\n  },\n  beforeRouteUpdate (to, from, next) {\n    this.getContent(to.params.uid)\n    next()\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n.wrapper {\n  max-width: 820px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 40px 10px;\n  font-family: Avenir, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n\n.title {\n  font-size: 32px;\n}\n\n.description {\n  margin-top: 40px;\n}\n\n.description h2 {\n  font-size: 24px;\n}\n\n.description h2:not(:first-child) {\n  margin-top: 20px;\n}\n\n.description p {\n  line-height: 1.5;\n}\n\n.description p:not(:first-child) {\n  margin-top: 10px;\n}\n\n.description a {\n  color: #404e9f;\n}\n\n.description a:hover {\n  text-decoration: underline;\n}\n\n.cta-wrapper {\n  margin-top: 40px;\n}\n\n.cta {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n  padding: 0 20px;\n  background-color: #404e9f;\n  color: white;\n}\n\n.icon-wrapper {\n  margin-top: 40px;\n}\n\n.icon {\n  max-width: 100%;\n}\n&lt;/style&gt;\n</code></pre>\n\n      <h4>Specify a route for the Page component</h4>\n      <p>Now that you’ve created your Page component, add the following route to the Vue Router, in src/router.js file:</p>\n<pre v-highlightjs class=\"source-code\"><code class=\"javascript\">// In src/router.js\n\n// ...\n\nimport Page from './views/Page.vue'\n\n// ...\n\n{\n  path: '/page/:uid',\n  name: 'page',\n  component: Page\n},\n\n// ...\n</code></pre>\n\n      <p>In your browser go to <a href=\"http://localhost:8080/page/quickstart\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/page/quickstart</a> <em> and voilà!</em> You’ve officially created a Vue component that pulls content from Prismic.</p>\n\n      <h3 id=\"done\"><span>5</span>Well done!</h3>\n      <p>Sit back and enjoy the result.</p>\n      <p>Basically in these few steps you’ve added content management to your Vue.js project and thanks to Prismic, you’ll have:</p>\n      <ol style=\"list-style-type: disc; padding-left: 20px;\">\n        <li>Full versioning of your content</li>\n        <li>A nice rich editor to create and edit your content</li>\n        <li>Collaboration with other users you choose to add to your repository</li>\n        <li>Performance and scalability for your content using a Content Delivery Network around the world</li>\n      </ol>\n\n    </section>\n\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport VueHighlightJS from 'vue-highlightjs'\n\nVue.use(VueHighlightJS)\n\nexport default {\n  name: 'Tutorial'\n}\n</script>\n\n<style>\n@import \"../assets/css/tutorial/highlight.min.css\";\n@import \"../assets/css/tutorial/tutorial.min.css\";\n</style>\n"]}]}